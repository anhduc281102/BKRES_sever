{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\AD\\\\BKRES_sever\\\\Server\\\\Frontend\\\\gis\\\\src\\\\components\\\\Main.jsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef } from 'react';\nimport L from 'leaflet';\nimport 'leaflet/dist/leaflet.css';\nimport '../styles/Main.css';\nimport mainStationIconUrl from '../assets/gateway_icon.png'; // Đường dẫn đến icon của trạm chính\nimport subStationIconUrl from '../assets/device_icon.png'; // Đường dẫn đến icon của trạm con\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Main() {\n  _s();\n  const mapContainer = useRef(null);\n  const mainStationMarkers = useRef([]); // Ref cho danh sách các markers của trạm chính\n  const subStationMarkers = useRef([]); // Ref cho danh sách các markers của trạm con\n\n  useEffect(() => {\n    if (!mapContainer.current || mapContainer.current.children.length === 0) {\n      // Khởi tạo bản đồ và đặt tọa độ trung tâm ở Việt Nam\n      const map = L.map(mapContainer.current).setView([16.4637, 107.5909], 6);\n\n      // Sử dụng bản đồ OpenStreetMap làm nền\n      L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {\n        attribution: '&copy; <a href=\"https://www.openstreetmap.org/copyright\">OpenStreetMap</a> contributors'\n      }).addTo(map);\n\n      // Tạo icon cho trạm chính\n      const mainStationIcon = L.icon({\n        iconUrl: mainStationIconUrl,\n        iconSize: [25, 41],\n        iconAnchor: [12, 41],\n        popupAnchor: [0, -41]\n      });\n\n      // Tạo icon cho trạm con\n      const subStationIcon = L.icon({\n        iconUrl: subStationIconUrl,\n        iconSize: [25, 41],\n        iconAnchor: [12, 41],\n        popupAnchor: [0, -41]\n      });\n\n      // Dữ liệu tọa độ của các trạm thu thập dữ liệu (ví dụ)\n      const stations = [{\n        name: 'Station 1',\n        location: [21.0285, 105.8542],\n        children: [[21.02, 105.85], [21.03, 105.85], [21.04, 105.85]]\n      }, {\n        name: 'Station 2',\n        location: [10.762622, 106.660172],\n        children: [[10.76, 106.66], [10.77, 106.66], [10.78, 106.66]]\n      }, {\n        name: 'Station 3',\n        location: [16.0544, 108.2022],\n        children: [[16.05, 108.20], [16.06, 108.20], [16.07, 108.20]]\n      }\n      // Thêm các trạm khác vào đây\n      ];\n\n      // Đánh dấu các điểm trạm trên bản đồ với icon tùy chỉnh\n      stations.forEach(station => {\n        const mainStationMarker = L.marker(station.location, {\n          icon: mainStationIcon\n        }).addTo(map).bindPopup(`<b>${station.name}</b>`);\n        mainStationMarkers.current.push(mainStationMarker);\n\n        // Sự kiện click trên marker của trạm chính\n        mainStationMarker.on('click', () => {\n          // Zoom vào vị trí của marker trạm chính\n          map.setView(station.location, 14.5);\n\n          // Xóa các marker của trạm con hiện tại\n          subStationMarkers.current.forEach(marker => map.removeLayer(marker));\n          subStationMarkers.current = [];\n\n          // Hiển thị vị trí của các node con với icon trạm con\n          station.children.forEach(child => {\n            const subStationMarker = L.marker(child, {\n              icon: subStationIcon\n            }).addTo(map); // Thêm marker cho node con với icon trạm con\n            subStationMarkers.current.push(subStationMarker); // Thêm marker của trạm con vào danh sách\n          });\n        });\n      });\n\n      // Sự kiện zoomend để xóa các marker của trạm con khi zoom < 7\n      map.on('zoomend', function () {\n        const zoom = map.getZoom();\n        if (zoom > 9) {\n          subStationMarkers.current.forEach(marker => map.removeLayer(marker));\n          subStationMarkers.current = [];\n        }\n      });\n    }\n  }, [mapContainer]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    ref: mapContainer,\n    id: \"map\",\n    className: \"map-container\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 80,\n    columnNumber: 12\n  }, this);\n}\n_s(Main, \"P7zcmBi2J6arWf8WtVxvFnDGAV8=\");\n_c = Main;\nexport default Main;\n\n// import React, { useEffect, useRef } from 'react';\n// import L from 'leaflet'; \n// import 'leaflet/dist/leaflet.css'; \n// import '../styles/Main.css';\n// import mainStationIconUrl from '../assets/gateway_icon.png'; \n// import subStationIconUrl from '../assets/device_icon.png'; \n// import axios from 'axios';\n\n// function Main() {\n//     const mapContainer = useRef(null);\n//     const mainStationMarkers = useRef([]); \n//     const subStationMarkers = useRef([]); \n\n//     useEffect(() => {\n//         const token = localStorage.getItem('Token');\n//         if (!token) {\n//             // Xử lý khi token không tồn tại, ví dụ: chuyển hướng người dùng đến trang đăng nhập\n//             return;\n//         }\n//         // var container = L.DomUtil.get('map');\n//         // if(container != null){\n//         //     container._leaflet_id = null;\n//         // }\n//         // Chỉ khởi tạo bản đồ nếu container chưa được khởi tạo\n//         if (!mapContainer.current || !mapContainer.current._leaflet_id) {\n//             // Cấu hình yêu cầu Axios\n//             const config = {\n//                 headers: {\n//                     'authorization': `${token}`\n//                 }\n//             };\n\n//             // Gửi yêu cầu GET đến endpoint để lấy dữ liệu gateway\n//             axios.get('http://sanslab.ddns.net:5000/api/gateway/getallGateway', config)\n//             .then(response => {\n//                 const gateways = response.data.data.gateways;\n//                 // Khởi tạo bản đồ và đặt tọa độ trung tâm\n//                 const map = L.map(mapContainer.current).setView([16.4637, 107.5909], 6);\n//                 // Thêm layer bản đồ\n//                 L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {\n//                     attribution: '&copy; <a href=\"https://www.openstreetmap.org/copyright\">OpenStreetMap</a> contributors'\n//                 }).addTo(map);\n\n//                 // Tạo icon cho trạm chính và trạm con\n//                 const mainStationIcon = L.icon({\n//                     iconUrl: mainStationIconUrl,\n//                     iconSize: [25, 41],\n//                     iconAnchor: [12, 41],\n//                     popupAnchor: [0, -41]\n//                 });\n//                 const subStationIcon = L.icon({\n//                     iconUrl: subStationIconUrl,\n//                     iconSize: [25, 41],\n//                     iconAnchor: [12, 41],\n//                     popupAnchor: [0, -41]\n//                 });\n\n//                 // Đánh dấu các trạm chính trên bản đồ\n//                 gateways.forEach(gateway => {\n//                     const location = gateway.location[0]; // Lấy tọa độ đầu tiên\n//                     const mainStationMarker = L.marker([location.lat, location.lon], { icon: mainStationIcon })\n//                         .addTo(map)\n//                         .bindPopup(`<b>${gateway.gateway_name}</b>`); \n//                     mainStationMarkers.current.push(mainStationMarker); \n\n//                     // Xử lý sự kiện click trên marker của trạm chính\n//                     mainStationMarker.on('click', () => {\n//                         // Zoom vào vị trí của marker trạm chính\n//                         map.setView([location.lat, location.lon], 14.5);\n\n//                         // Xóa các marker của trạm con hiện tại\n//                         subStationMarkers.current.forEach(marker => map.removeLayer(marker));\n//                         subStationMarkers.current = [];\n\n//                         // Hiển thị vị trí của các thiết bị trạm con với icon trạm con\n//                         gateway.device.forEach(device => {\n//                             const subStationMarker = L.marker([device.location.lat, device.location.lon], { icon: subStationIcon })\n//                                 .addTo(map)\n//                                 .bindPopup(`<b>${device.device_name}</b>`); \n//                             subStationMarkers.current.push(subStationMarker); \n//                         });\n//                     });\n//                 });\n//             })\n//             .catch(error => {\n//                 console.error('Error fetching gateways:', error);\n//             });\n//         }\n//     }, [mapContainer]);\n\n//     return <div ref={mapContainer} id=\"map\" className=\"map-container\"></div>;\n// }\n\n// export default Main;\nvar _c;\n$RefreshReg$(_c, \"Main\");","map":{"version":3,"names":["React","useEffect","useRef","L","mainStationIconUrl","subStationIconUrl","jsxDEV","_jsxDEV","Main","_s","mapContainer","mainStationMarkers","subStationMarkers","current","children","length","map","setView","tileLayer","attribution","addTo","mainStationIcon","icon","iconUrl","iconSize","iconAnchor","popupAnchor","subStationIcon","stations","name","location","forEach","station","mainStationMarker","marker","bindPopup","push","on","removeLayer","child","subStationMarker","zoom","getZoom","ref","id","className","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/AD/BKRES_sever/Server/Frontend/gis/src/components/Main.jsx"],"sourcesContent":["import React, { useEffect, useRef } from 'react';\r\nimport L from 'leaflet'; \r\nimport 'leaflet/dist/leaflet.css'; \r\nimport '../styles/Main.css';\r\nimport mainStationIconUrl from '../assets/gateway_icon.png'; // Đường dẫn đến icon của trạm chính\r\nimport subStationIconUrl from '../assets/device_icon.png'; // Đường dẫn đến icon của trạm con\r\n\r\nfunction Main() {\r\n    const mapContainer = useRef(null);\r\n    const mainStationMarkers = useRef([]); // Ref cho danh sách các markers của trạm chính\r\n    const subStationMarkers = useRef([]); // Ref cho danh sách các markers của trạm con\r\n\r\n    useEffect(() => {\r\n        if (!mapContainer.current || mapContainer.current.children.length === 0) {\r\n            // Khởi tạo bản đồ và đặt tọa độ trung tâm ở Việt Nam\r\n            const map = L.map(mapContainer.current).setView([16.4637, 107.5909], 6);\r\n\r\n            // Sử dụng bản đồ OpenStreetMap làm nền\r\n            L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {\r\n                attribution: '&copy; <a href=\"https://www.openstreetmap.org/copyright\">OpenStreetMap</a> contributors'\r\n            }).addTo(map);\r\n\r\n            // Tạo icon cho trạm chính\r\n            const mainStationIcon = L.icon({\r\n                iconUrl: mainStationIconUrl,\r\n                iconSize: [25, 41],\r\n                iconAnchor: [12, 41],\r\n                popupAnchor: [0, -41]\r\n            });\r\n\r\n            // Tạo icon cho trạm con\r\n            const subStationIcon = L.icon({\r\n                iconUrl: subStationIconUrl,\r\n                iconSize: [25, 41],\r\n                iconAnchor: [12, 41],\r\n                popupAnchor: [0, -41]\r\n            });\r\n\r\n            // Dữ liệu tọa độ của các trạm thu thập dữ liệu (ví dụ)\r\n            const stations = [\r\n                { name: 'Station 1', location: [21.0285, 105.8542], children: [[21.02, 105.85], [21.03, 105.85], [21.04, 105.85]] },\r\n                { name: 'Station 2', location: [10.762622, 106.660172], children: [[10.76, 106.66], [10.77, 106.66], [10.78, 106.66]] },\r\n                { name: 'Station 3', location: [16.0544, 108.2022], children: [[16.05, 108.20], [16.06, 108.20], [16.07, 108.20]] }\r\n                // Thêm các trạm khác vào đây\r\n            ];\r\n\r\n            // Đánh dấu các điểm trạm trên bản đồ với icon tùy chỉnh\r\n            stations.forEach(station => {\r\n                const mainStationMarker = L.marker(station.location, { icon: mainStationIcon }).addTo(map).bindPopup(`<b>${station.name}</b>`); \r\n                mainStationMarkers.current.push(mainStationMarker); \r\n\r\n                // Sự kiện click trên marker của trạm chính\r\n                mainStationMarker.on('click', () => {\r\n                    // Zoom vào vị trí của marker trạm chính\r\n                    map.setView(station.location, 14.5);\r\n\r\n                    // Xóa các marker của trạm con hiện tại\r\n                    subStationMarkers.current.forEach(marker => map.removeLayer(marker));\r\n                    subStationMarkers.current = [];\r\n\r\n                    // Hiển thị vị trí của các node con với icon trạm con\r\n                    station.children.forEach(child => {\r\n                        const subStationMarker = L.marker(child, { icon: subStationIcon }).addTo(map); // Thêm marker cho node con với icon trạm con\r\n                        subStationMarkers.current.push(subStationMarker); // Thêm marker của trạm con vào danh sách\r\n                    });\r\n                });\r\n            });\r\n\r\n            // Sự kiện zoomend để xóa các marker của trạm con khi zoom < 7\r\n            map.on('zoomend', function() {\r\n                const zoom = map.getZoom();\r\n                if (zoom > 9) {\r\n                    subStationMarkers.current.forEach(marker => map.removeLayer(marker));\r\n                    subStationMarkers.current = [];\r\n                }\r\n            });\r\n        }\r\n    }, [mapContainer]);\r\n\r\n    return <div ref={mapContainer} id=\"map\" className=\"map-container\"></div>;\r\n}\r\n\r\nexport default Main;\r\n\r\n// import React, { useEffect, useRef } from 'react';\r\n// import L from 'leaflet'; \r\n// import 'leaflet/dist/leaflet.css'; \r\n// import '../styles/Main.css';\r\n// import mainStationIconUrl from '../assets/gateway_icon.png'; \r\n// import subStationIconUrl from '../assets/device_icon.png'; \r\n// import axios from 'axios';\r\n\r\n// function Main() {\r\n//     const mapContainer = useRef(null);\r\n//     const mainStationMarkers = useRef([]); \r\n//     const subStationMarkers = useRef([]); \r\n\r\n//     useEffect(() => {\r\n//         const token = localStorage.getItem('Token');\r\n//         if (!token) {\r\n//             // Xử lý khi token không tồn tại, ví dụ: chuyển hướng người dùng đến trang đăng nhập\r\n//             return;\r\n//         }\r\n//         // var container = L.DomUtil.get('map');\r\n//         // if(container != null){\r\n//         //     container._leaflet_id = null;\r\n//         // }\r\n//         // Chỉ khởi tạo bản đồ nếu container chưa được khởi tạo\r\n//         if (!mapContainer.current || !mapContainer.current._leaflet_id) {\r\n//             // Cấu hình yêu cầu Axios\r\n//             const config = {\r\n//                 headers: {\r\n//                     'authorization': `${token}`\r\n//                 }\r\n//             };\r\n        \r\n//             // Gửi yêu cầu GET đến endpoint để lấy dữ liệu gateway\r\n//             axios.get('http://sanslab.ddns.net:5000/api/gateway/getallGateway', config)\r\n//             .then(response => {\r\n//                 const gateways = response.data.data.gateways;\r\n//                 // Khởi tạo bản đồ và đặt tọa độ trung tâm\r\n//                 const map = L.map(mapContainer.current).setView([16.4637, 107.5909], 6);\r\n//                 // Thêm layer bản đồ\r\n//                 L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {\r\n//                     attribution: '&copy; <a href=\"https://www.openstreetmap.org/copyright\">OpenStreetMap</a> contributors'\r\n//                 }).addTo(map);\r\n        \r\n//                 // Tạo icon cho trạm chính và trạm con\r\n//                 const mainStationIcon = L.icon({\r\n//                     iconUrl: mainStationIconUrl,\r\n//                     iconSize: [25, 41],\r\n//                     iconAnchor: [12, 41],\r\n//                     popupAnchor: [0, -41]\r\n//                 });\r\n//                 const subStationIcon = L.icon({\r\n//                     iconUrl: subStationIconUrl,\r\n//                     iconSize: [25, 41],\r\n//                     iconAnchor: [12, 41],\r\n//                     popupAnchor: [0, -41]\r\n//                 });\r\n        \r\n//                 // Đánh dấu các trạm chính trên bản đồ\r\n//                 gateways.forEach(gateway => {\r\n//                     const location = gateway.location[0]; // Lấy tọa độ đầu tiên\r\n//                     const mainStationMarker = L.marker([location.lat, location.lon], { icon: mainStationIcon })\r\n//                         .addTo(map)\r\n//                         .bindPopup(`<b>${gateway.gateway_name}</b>`); \r\n//                     mainStationMarkers.current.push(mainStationMarker); \r\n        \r\n//                     // Xử lý sự kiện click trên marker của trạm chính\r\n//                     mainStationMarker.on('click', () => {\r\n//                         // Zoom vào vị trí của marker trạm chính\r\n//                         map.setView([location.lat, location.lon], 14.5);\r\n        \r\n//                         // Xóa các marker của trạm con hiện tại\r\n//                         subStationMarkers.current.forEach(marker => map.removeLayer(marker));\r\n//                         subStationMarkers.current = [];\r\n        \r\n//                         // Hiển thị vị trí của các thiết bị trạm con với icon trạm con\r\n//                         gateway.device.forEach(device => {\r\n//                             const subStationMarker = L.marker([device.location.lat, device.location.lon], { icon: subStationIcon })\r\n//                                 .addTo(map)\r\n//                                 .bindPopup(`<b>${device.device_name}</b>`); \r\n//                             subStationMarkers.current.push(subStationMarker); \r\n//                         });\r\n//                     });\r\n//                 });\r\n//             })\r\n//             .catch(error => {\r\n//                 console.error('Error fetching gateways:', error);\r\n//             });\r\n//         }\r\n//     }, [mapContainer]);\r\n\r\n//     return <div ref={mapContainer} id=\"map\" className=\"map-container\"></div>;\r\n// }\r\n\r\n// export default Main;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}