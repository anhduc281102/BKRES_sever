{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\AD\\\\Desktop\\\\GIS\\\\gis\\\\src\\\\components\\\\Main.jsx\",\n  _s = $RefreshSig$();\n// import React, { useEffect, useRef } from 'react';\n// import L from 'leaflet'; \n// import 'leaflet/dist/leaflet.css'; \n// import '../styles/Main.css';\n// import mainStationIconUrl from '../assets/gateway_icon.png'; // Đường dẫn đến icon của trạm chính\n// import subStationIconUrl from '../assets/device_icon.png'; // Đường dẫn đến icon của trạm con\n\n// function Main() {\n//     const mapContainer = useRef(null);\n//     const mainStationMarkers = useRef([]); // Ref cho danh sách các markers của trạm chính\n//     const subStationMarkers = useRef([]); // Ref cho danh sách các markers của trạm con\n\n//     useEffect(() => {\n//         if (!mapContainer.current || mapContainer.current.children.length === 0) {\n//             // Khởi tạo bản đồ và đặt tọa độ trung tâm ở Việt Nam\n//             const map = L.map(mapContainer.current).setView([16.4637, 107.5909], 6);\n\n//             // Sử dụng bản đồ OpenStreetMap làm nền\n//             L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {\n//                 attribution: '&copy; <a href=\"https://www.openstreetmap.org/copyright\">OpenStreetMap</a> contributors'\n//             }).addTo(map);\n\n//             // Tạo icon cho trạm chính\n//             const mainStationIcon = L.icon({\n//                 iconUrl: mainStationIconUrl,\n//                 iconSize: [25, 41],\n//                 iconAnchor: [12, 41],\n//                 popupAnchor: [0, -41]\n//             });\n\n//             // Tạo icon cho trạm con\n//             const subStationIcon = L.icon({\n//                 iconUrl: subStationIconUrl,\n//                 iconSize: [25, 41],\n//                 iconAnchor: [12, 41],\n//                 popupAnchor: [0, -41]\n//             });\n\n//             // Dữ liệu tọa độ của các trạm thu thập dữ liệu (ví dụ)\n//             const stations = [\n//                 { name: 'Station 1', location: [21.0285, 105.8542], children: [[21.02, 105.85], [21.03, 105.85], [21.04, 105.85]] },\n//                 { name: 'Station 2', location: [10.762622, 106.660172], children: [[10.76, 106.66], [10.77, 106.66], [10.78, 106.66]] },\n//                 { name: 'Station 3', location: [16.0544, 108.2022], children: [[16.05, 108.20], [16.06, 108.20], [16.07, 108.20]] }\n//                 // Thêm các trạm khác vào đây\n//             ];\n\n//             // Đánh dấu các điểm trạm trên bản đồ với icon tùy chỉnh\n//             stations.forEach(station => {\n//                 const mainStationMarker = L.marker(station.location, { icon: mainStationIcon }).addTo(map).bindPopup(`<b>${station.name}</b>`); \n//                 mainStationMarkers.current.push(mainStationMarker); \n\n//                 // Sự kiện click trên marker của trạm chính\n//                 mainStationMarker.on('click', () => {\n//                     // Zoom vào vị trí của marker trạm chính\n//                     map.setView(station.location, 14.5);\n\n//                     // Xóa các marker của trạm con hiện tại\n//                     subStationMarkers.current.forEach(marker => map.removeLayer(marker));\n//                     subStationMarkers.current = [];\n\n//                     // Hiển thị vị trí của các node con với icon trạm con\n//                     station.children.forEach(child => {\n//                         const subStationMarker = L.marker(child, { icon: subStationIcon }).addTo(map); // Thêm marker cho node con với icon trạm con\n//                         subStationMarkers.current.push(subStationMarker); // Thêm marker của trạm con vào danh sách\n//                     });\n//                 });\n//             });\n\n//             // Sự kiện zoomend để xóa các marker của trạm con khi zoom < 7\n//             map.on('zoomend', function() {\n//                 const zoom = map.getZoom();\n//                 if (zoom > 9) {\n//                     subStationMarkers.current.forEach(marker => map.removeLayer(marker));\n//                     subStationMarkers.current = [];\n//                 }\n//             });\n//         }\n//     }, [mapContainer]);\n\n//     return <div ref={mapContainer} id=\"map\" className=\"map-container\"></div>;\n// }\n\n// export default Main;\n\nimport React, { useEffect, useRef } from 'react';\nimport L from 'leaflet';\nimport 'leaflet/dist/leaflet.css';\nimport '../styles/Main.css';\nimport mainStationIconUrl from '../assets/gateway_icon.png';\nimport subStationIconUrl from '../assets/device_icon.png';\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Main() {\n  _s();\n  const mapContainer = useRef(null);\n  const mainStationMarkers = useRef([]);\n  const subStationMarkers = useRef([]);\n  useEffect(() => {\n    const token = localStorage.getItem('Token');\n    console.log(token);\n\n    // Cấu hình yêu cầu Axios\n    const config = {\n      headers: {\n        'authorization': `${token}`\n      }\n    };\n\n    // Gửi yêu cầu GET đến endpoint để lấy dữ liệu gateway\n    axios.get('http://sanslab.ddns.net:5000/api/gateway/getallGateway', config).then(response => {\n      const gateways = response.data.data.gateways;\n      // Khởi tạo bản đồ và đặt tọa độ trung tâm\n      const map = L.map(mapContainer.current).setView([16.4637, 107.5909], 6);\n      // Thêm layer bản đồ\n      L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {\n        attribution: '&copy; <a href=\"https://www.openstreetmap.org/copyright\">OpenStreetMap</a> contributors'\n      }).addTo(map);\n\n      // Tạo icon cho trạm chính và trạm con\n      const mainStationIcon = L.icon({\n        iconUrl: mainStationIconUrl,\n        iconSize: [25, 41],\n        iconAnchor: [12, 41],\n        popupAnchor: [0, -41]\n      });\n      const subStationIcon = L.icon({\n        iconUrl: subStationIconUrl,\n        iconSize: [25, 41],\n        iconAnchor: [12, 41],\n        popupAnchor: [0, -41]\n      });\n\n      // Đánh dấu các trạm chính trên bản đồ\n      gateways.forEach(gateway => {\n        const location = gateway.location[0]; // Lấy tọa độ đầu tiên\n        const mainStationMarker = L.marker([location.lat, location.lon], {\n          icon: mainStationIcon\n        }).addTo(map).bindPopup(`<b>${gateway.gateway_name}</b>`);\n        mainStationMarkers.current.push(mainStationMarker);\n\n        // Xử lý sự kiện click trên marker của trạm chính\n        mainStationMarker.on('click', () => {\n          // Zoom vào vị trí của marker trạm chính\n          map.setView([location.lat, location.lon], 14.5);\n\n          // Xóa các marker của trạm con hiện tại\n          subStationMarkers.current.forEach(marker => map.removeLayer(marker));\n          subStationMarkers.current = [];\n\n          // Hiển thị vị trí của các thiết bị trạm con với icon trạm con\n          gateway.device.forEach(device => {\n            const subStationMarker = L.marker([device.location.lat, device.location.lon], {\n              icon: subStationIcon\n            }).addTo(map).bindPopup(`<b>${device.device_name}</b>`);\n            subStationMarkers.current.push(subStationMarker);\n          });\n        });\n      });\n    }).catch(error => {\n      console.error('Error fetching gateways:', error);\n    });\n  }, [mapContainer]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    ref: mapContainer,\n    id: \"map\",\n    className: \"map-container\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 166,\n    columnNumber: 12\n  }, this);\n}\n_s(Main, \"P7zcmBi2J6arWf8WtVxvFnDGAV8=\");\n_c = Main;\nexport default Main;\nvar _c;\n$RefreshReg$(_c, \"Main\");","map":{"version":3,"names":["React","useEffect","useRef","L","mainStationIconUrl","subStationIconUrl","axios","jsxDEV","_jsxDEV","Main","_s","mapContainer","mainStationMarkers","subStationMarkers","token","localStorage","getItem","console","log","config","headers","get","then","response","gateways","data","map","current","setView","tileLayer","attribution","addTo","mainStationIcon","icon","iconUrl","iconSize","iconAnchor","popupAnchor","subStationIcon","forEach","gateway","location","mainStationMarker","marker","lat","lon","bindPopup","gateway_name","push","on","removeLayer","device","subStationMarker","device_name","catch","error","ref","id","className","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/AD/Desktop/GIS/gis/src/components/Main.jsx"],"sourcesContent":["// import React, { useEffect, useRef } from 'react';\r\n// import L from 'leaflet'; \r\n// import 'leaflet/dist/leaflet.css'; \r\n// import '../styles/Main.css';\r\n// import mainStationIconUrl from '../assets/gateway_icon.png'; // Đường dẫn đến icon của trạm chính\r\n// import subStationIconUrl from '../assets/device_icon.png'; // Đường dẫn đến icon của trạm con\r\n\r\n// function Main() {\r\n//     const mapContainer = useRef(null);\r\n//     const mainStationMarkers = useRef([]); // Ref cho danh sách các markers của trạm chính\r\n//     const subStationMarkers = useRef([]); // Ref cho danh sách các markers của trạm con\r\n\r\n//     useEffect(() => {\r\n//         if (!mapContainer.current || mapContainer.current.children.length === 0) {\r\n//             // Khởi tạo bản đồ và đặt tọa độ trung tâm ở Việt Nam\r\n//             const map = L.map(mapContainer.current).setView([16.4637, 107.5909], 6);\r\n\r\n//             // Sử dụng bản đồ OpenStreetMap làm nền\r\n//             L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {\r\n//                 attribution: '&copy; <a href=\"https://www.openstreetmap.org/copyright\">OpenStreetMap</a> contributors'\r\n//             }).addTo(map);\r\n\r\n//             // Tạo icon cho trạm chính\r\n//             const mainStationIcon = L.icon({\r\n//                 iconUrl: mainStationIconUrl,\r\n//                 iconSize: [25, 41],\r\n//                 iconAnchor: [12, 41],\r\n//                 popupAnchor: [0, -41]\r\n//             });\r\n\r\n//             // Tạo icon cho trạm con\r\n//             const subStationIcon = L.icon({\r\n//                 iconUrl: subStationIconUrl,\r\n//                 iconSize: [25, 41],\r\n//                 iconAnchor: [12, 41],\r\n//                 popupAnchor: [0, -41]\r\n//             });\r\n\r\n//             // Dữ liệu tọa độ của các trạm thu thập dữ liệu (ví dụ)\r\n//             const stations = [\r\n//                 { name: 'Station 1', location: [21.0285, 105.8542], children: [[21.02, 105.85], [21.03, 105.85], [21.04, 105.85]] },\r\n//                 { name: 'Station 2', location: [10.762622, 106.660172], children: [[10.76, 106.66], [10.77, 106.66], [10.78, 106.66]] },\r\n//                 { name: 'Station 3', location: [16.0544, 108.2022], children: [[16.05, 108.20], [16.06, 108.20], [16.07, 108.20]] }\r\n//                 // Thêm các trạm khác vào đây\r\n//             ];\r\n\r\n//             // Đánh dấu các điểm trạm trên bản đồ với icon tùy chỉnh\r\n//             stations.forEach(station => {\r\n//                 const mainStationMarker = L.marker(station.location, { icon: mainStationIcon }).addTo(map).bindPopup(`<b>${station.name}</b>`); \r\n//                 mainStationMarkers.current.push(mainStationMarker); \r\n\r\n//                 // Sự kiện click trên marker của trạm chính\r\n//                 mainStationMarker.on('click', () => {\r\n//                     // Zoom vào vị trí của marker trạm chính\r\n//                     map.setView(station.location, 14.5);\r\n\r\n//                     // Xóa các marker của trạm con hiện tại\r\n//                     subStationMarkers.current.forEach(marker => map.removeLayer(marker));\r\n//                     subStationMarkers.current = [];\r\n\r\n//                     // Hiển thị vị trí của các node con với icon trạm con\r\n//                     station.children.forEach(child => {\r\n//                         const subStationMarker = L.marker(child, { icon: subStationIcon }).addTo(map); // Thêm marker cho node con với icon trạm con\r\n//                         subStationMarkers.current.push(subStationMarker); // Thêm marker của trạm con vào danh sách\r\n//                     });\r\n//                 });\r\n//             });\r\n\r\n//             // Sự kiện zoomend để xóa các marker của trạm con khi zoom < 7\r\n//             map.on('zoomend', function() {\r\n//                 const zoom = map.getZoom();\r\n//                 if (zoom > 9) {\r\n//                     subStationMarkers.current.forEach(marker => map.removeLayer(marker));\r\n//                     subStationMarkers.current = [];\r\n//                 }\r\n//             });\r\n//         }\r\n//     }, [mapContainer]);\r\n\r\n//     return <div ref={mapContainer} id=\"map\" className=\"map-container\"></div>;\r\n// }\r\n\r\n// export default Main;\r\n\r\nimport React, { useEffect, useRef } from 'react';\r\nimport L from 'leaflet'; \r\nimport 'leaflet/dist/leaflet.css'; \r\nimport '../styles/Main.css';\r\nimport mainStationIconUrl from '../assets/gateway_icon.png'; \r\nimport subStationIconUrl from '../assets/device_icon.png'; \r\nimport axios from 'axios';\r\n\r\nfunction Main() {\r\n    const mapContainer = useRef(null);\r\n    const mainStationMarkers = useRef([]); \r\n    const subStationMarkers = useRef([]); \r\n\r\n    useEffect(() => {\r\n        const token = localStorage.getItem('Token');\r\n        console.log(token);\r\n    \r\n        // Cấu hình yêu cầu Axios\r\n        const config = {\r\n            headers: {\r\n                'authorization': `${token}`\r\n            }\r\n        };\r\n    \r\n        // Gửi yêu cầu GET đến endpoint để lấy dữ liệu gateway\r\n        axios.get('http://sanslab.ddns.net:5000/api/gateway/getallGateway', config)\r\n        .then(response => {\r\n            const gateways = response.data.data.gateways;\r\n            // Khởi tạo bản đồ và đặt tọa độ trung tâm\r\n            const map = L.map(mapContainer.current).setView([16.4637, 107.5909], 6);\r\n            // Thêm layer bản đồ\r\n            L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {\r\n                attribution: '&copy; <a href=\"https://www.openstreetmap.org/copyright\">OpenStreetMap</a> contributors'\r\n            }).addTo(map);\r\n\r\n            // Tạo icon cho trạm chính và trạm con\r\n            const mainStationIcon = L.icon({\r\n                iconUrl: mainStationIconUrl,\r\n                iconSize: [25, 41],\r\n                iconAnchor: [12, 41],\r\n                popupAnchor: [0, -41]\r\n            });\r\n            const subStationIcon = L.icon({\r\n                iconUrl: subStationIconUrl,\r\n                iconSize: [25, 41],\r\n                iconAnchor: [12, 41],\r\n                popupAnchor: [0, -41]\r\n            });\r\n\r\n            // Đánh dấu các trạm chính trên bản đồ\r\n            gateways.forEach(gateway => {\r\n                const location = gateway.location[0]; // Lấy tọa độ đầu tiên\r\n                const mainStationMarker = L.marker([location.lat, location.lon], { icon: mainStationIcon })\r\n                    .addTo(map)\r\n                    .bindPopup(`<b>${gateway.gateway_name}</b>`); \r\n                mainStationMarkers.current.push(mainStationMarker); \r\n\r\n                // Xử lý sự kiện click trên marker của trạm chính\r\n                mainStationMarker.on('click', () => {\r\n                    // Zoom vào vị trí của marker trạm chính\r\n                    map.setView([location.lat, location.lon], 14.5);\r\n\r\n                    // Xóa các marker của trạm con hiện tại\r\n                    subStationMarkers.current.forEach(marker => map.removeLayer(marker));\r\n                    subStationMarkers.current = [];\r\n\r\n                    // Hiển thị vị trí của các thiết bị trạm con với icon trạm con\r\n                    gateway.device.forEach(device => {\r\n                        const subStationMarker = L.marker([device.location.lat, device.location.lon], { icon: subStationIcon })\r\n                            .addTo(map)\r\n                            .bindPopup(`<b>${device.device_name}</b>`); \r\n                        subStationMarkers.current.push(subStationMarker); \r\n                    });\r\n                });\r\n            });\r\n        })\r\n        .catch(error => {\r\n            console.error('Error fetching gateways:', error);\r\n        });\r\n    }, [mapContainer]);\r\n\r\n    return <div ref={mapContainer} id=\"map\" className=\"map-container\"></div>;\r\n}\r\n\r\nexport default Main;\r\n\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}