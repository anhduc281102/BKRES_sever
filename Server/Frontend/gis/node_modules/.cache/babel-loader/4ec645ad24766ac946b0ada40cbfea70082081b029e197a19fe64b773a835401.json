{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\AD\\\\Desktop\\\\GIS\\\\gis\\\\src\\\\components\\\\Main.jsx\",\n  _s = $RefreshSig$();\n// import React, { useEffect, useRef } from 'react';\n// import L from 'leaflet'; \n// import 'leaflet/dist/leaflet.css'; \n// import '../styles/Main.css';\n// import mainStationIconUrl from '../assets/gateway_icon.png'; // Đường dẫn đến icon của trạm chính\n// import subStationIconUrl from '../assets/device_icon.png'; // Đường dẫn đến icon của trạm con\n\n// function Main() {\n//     const mapContainer = useRef(null);\n//     const mainStationMarkers = useRef([]); // Ref cho danh sách các markers của trạm chính\n//     const subStationMarkers = useRef([]); // Ref cho danh sách các markers của trạm con\n\n//     useEffect(() => {\n//         if (!mapContainer.current || mapContainer.current.children.length === 0) {\n//             // Khởi tạo bản đồ và đặt tọa độ trung tâm ở Việt Nam\n//             const map = L.map(mapContainer.current).setView([16.4637, 107.5909], 6);\n\n//             // Sử dụng bản đồ OpenStreetMap làm nền\n//             L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {\n//                 attribution: '&copy; <a href=\"https://www.openstreetmap.org/copyright\">OpenStreetMap</a> contributors'\n//             }).addTo(map);\n\n//             // Tạo icon cho trạm chính\n//             const mainStationIcon = L.icon({\n//                 iconUrl: mainStationIconUrl,\n//                 iconSize: [25, 41],\n//                 iconAnchor: [12, 41],\n//                 popupAnchor: [0, -41]\n//             });\n\n//             // Tạo icon cho trạm con\n//             const subStationIcon = L.icon({\n//                 iconUrl: subStationIconUrl,\n//                 iconSize: [25, 41],\n//                 iconAnchor: [12, 41],\n//                 popupAnchor: [0, -41]\n//             });\n\n//             // Dữ liệu tọa độ của các trạm thu thập dữ liệu (ví dụ)\n//             const stations = [\n//                 { name: 'Station 1', location: [21.0285, 105.8542], children: [[21.02, 105.85], [21.03, 105.85], [21.04, 105.85]] },\n//                 { name: 'Station 2', location: [10.762622, 106.660172], children: [[10.76, 106.66], [10.77, 106.66], [10.78, 106.66]] },\n//                 { name: 'Station 3', location: [16.0544, 108.2022], children: [[16.05, 108.20], [16.06, 108.20], [16.07, 108.20]] }\n//                 // Thêm các trạm khác vào đây\n//             ];\n\n//             // Đánh dấu các điểm trạm trên bản đồ với icon tùy chỉnh\n//             stations.forEach(station => {\n//                 const mainStationMarker = L.marker(station.location, { icon: mainStationIcon }).addTo(map).bindPopup(`<b>${station.name}</b>`); \n//                 mainStationMarkers.current.push(mainStationMarker); \n\n//                 // Sự kiện click trên marker của trạm chính\n//                 mainStationMarker.on('click', () => {\n//                     // Zoom vào vị trí của marker trạm chính\n//                     map.setView(station.location, 14.5);\n\n//                     // Xóa các marker của trạm con hiện tại\n//                     subStationMarkers.current.forEach(marker => map.removeLayer(marker));\n//                     subStationMarkers.current = [];\n\n//                     // Hiển thị vị trí của các node con với icon trạm con\n//                     station.children.forEach(child => {\n//                         const subStationMarker = L.marker(child, { icon: subStationIcon }).addTo(map); // Thêm marker cho node con với icon trạm con\n//                         subStationMarkers.current.push(subStationMarker); // Thêm marker của trạm con vào danh sách\n//                     });\n//                 });\n//             });\n\n//             // Sự kiện zoomend để xóa các marker của trạm con khi zoom < 7\n//             map.on('zoomend', function() {\n//                 const zoom = map.getZoom();\n//                 if (zoom > 9) {\n//                     subStationMarkers.current.forEach(marker => map.removeLayer(marker));\n//                     subStationMarkers.current = [];\n//                 }\n//             });\n//         }\n//     }, [mapContainer]);\n\n//     return <div ref={mapContainer} id=\"map\" className=\"map-container\"></div>;\n// }\n\n// export default Main;\n\nimport React, { useEffect, useRef, useState } from 'react';\nimport L from 'leaflet';\nimport 'leaflet/dist/leaflet.css';\nimport axios from 'axios';\nimport mainStationIconUrl from '../assets/gateway_icon.png'; // Đường dẫn đến icon của trạm chính\nimport subStationIconUrl from '../assets/device_icon.png'; // Đường dẫn đến icon của trạm con\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Main() {\n  _s();\n  const mapContainer = useRef(null);\n  const mainStationMarkers = useRef([]); // Ref cho danh sách các markers của trạm chính\n  const subStationMarkers = useRef([]); // Ref cho danh sách các markers của trạm con\n  const [gateways, setGateways] = useState([]);\n  useEffect(() => {\n    // Lấy token từ localStorage\n    const token = localStorage.getItem('Token');\n\n    // Gọi API để lấy thông tin về các gateway\n    axios.get('http://sanslab.ddns.net:5000/api/gateway/getallGateway', {\n      headers: {\n        authorization: `Bearer ${token}`\n      }\n    }).then(response => {\n      // Xử lý phản hồi từ server\n      const data = response.data;\n      setGateways(data.data.gateways);\n    }).catch(error => {\n      // Xử lý lỗi\n      console.error('Error fetching gateways:', error);\n    });\n  }, []);\n  useEffect(() => {\n    if (!mapContainer.current || mapContainer.current.children.length === 0) {\n      // Khởi tạo bản đồ và đặt tọa độ trung tâm ở Việt Nam\n      const map = L.map(mapContainer.current).setView([16.4637, 107.5909], 6);\n\n      // Sử dụng bản đồ OpenStreetMap làm nền\n      L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {\n        attribution: '&copy; <a href=\"https://www.openstreetmap.org/copyright\">OpenStreetMap</a> contributors'\n      }).addTo(map);\n\n      // Tạo icon cho trạm chính\n      const mainStationIcon = L.icon({\n        iconUrl: mainStationIconUrl,\n        iconSize: [25, 41],\n        iconAnchor: [12, 41],\n        popupAnchor: [0, -41]\n      });\n\n      // Tạo icon cho trạm con\n      const subStationIcon = L.icon({\n        iconUrl: subStationIconUrl,\n        iconSize: [25, 41],\n        iconAnchor: [12, 41],\n        popupAnchor: [0, -41]\n      });\n\n      // Đánh dấu các điểm trạm trên bản đồ với icon tùy chỉnh\n      gateways.forEach(gateway => {\n        const {\n          gateway_name,\n          location,\n          device\n        } = gateway;\n\n        // Đánh dấu trạm chính\n        const mainStationMarker = L.marker([location[0].lat, location[0].lon], {\n          icon: mainStationIcon\n        }).addTo(map).bindPopup(`<b>${gateway_name}</b>`);\n        mainStationMarkers.current.push(mainStationMarker);\n\n        // Sự kiện click trên marker của trạm chính\n        mainStationMarker.on('click', () => {\n          // Zoom vào vị trí của marker trạm chính\n          map.setView([location[0].lat, location[0].lon], 14.5);\n\n          // Xóa các marker của trạm con hiện tại\n          subStationMarkers.current.forEach(marker => map.removeLayer(marker));\n          subStationMarkers.current = [];\n\n          // Hiển thị vị trí của các node con với icon trạm con\n          device.forEach(subStation => {\n            const subStationMarker = L.marker([subStation.location.lat, subStation.location.lon], {\n              icon: subStationIcon\n            }).addTo(map); // Thêm marker cho node con với icon trạm con\n            subStationMarkers.current.push(subStationMarker); // Thêm marker của trạm con vào danh sách\n          });\n        });\n      });\n\n      // Sự kiện zoomend để xóa các marker của trạm con khi zoom < 7\n      map.on('zoomend', function () {\n        const zoom = map.getZoom();\n        if (zoom > 9) {\n          subStationMarkers.current.forEach(marker => map.removeLayer(marker));\n          subStationMarkers.current = [];\n        }\n      });\n    }\n  }, [gateways]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    ref: mapContainer,\n    id: \"map\",\n    className: \"map-container\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 181,\n    columnNumber: 12\n  }, this);\n}\n_s(Main, \"a13UDVB+hlZuMIuAY3luSzXmlVM=\");\n_c = Main;\nexport default Main;\nvar _c;\n$RefreshReg$(_c, \"Main\");","map":{"version":3,"names":["React","useEffect","useRef","useState","L","axios","mainStationIconUrl","subStationIconUrl","jsxDEV","_jsxDEV","Main","_s","mapContainer","mainStationMarkers","subStationMarkers","gateways","setGateways","token","localStorage","getItem","get","headers","authorization","then","response","data","catch","error","console","current","children","length","map","setView","tileLayer","attribution","addTo","mainStationIcon","icon","iconUrl","iconSize","iconAnchor","popupAnchor","subStationIcon","forEach","gateway","gateway_name","location","device","mainStationMarker","marker","lat","lon","bindPopup","push","on","removeLayer","subStation","subStationMarker","zoom","getZoom","ref","id","className","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/AD/Desktop/GIS/gis/src/components/Main.jsx"],"sourcesContent":["// import React, { useEffect, useRef } from 'react';\r\n// import L from 'leaflet'; \r\n// import 'leaflet/dist/leaflet.css'; \r\n// import '../styles/Main.css';\r\n// import mainStationIconUrl from '../assets/gateway_icon.png'; // Đường dẫn đến icon của trạm chính\r\n// import subStationIconUrl from '../assets/device_icon.png'; // Đường dẫn đến icon của trạm con\r\n\r\n// function Main() {\r\n//     const mapContainer = useRef(null);\r\n//     const mainStationMarkers = useRef([]); // Ref cho danh sách các markers của trạm chính\r\n//     const subStationMarkers = useRef([]); // Ref cho danh sách các markers của trạm con\r\n\r\n//     useEffect(() => {\r\n//         if (!mapContainer.current || mapContainer.current.children.length === 0) {\r\n//             // Khởi tạo bản đồ và đặt tọa độ trung tâm ở Việt Nam\r\n//             const map = L.map(mapContainer.current).setView([16.4637, 107.5909], 6);\r\n\r\n//             // Sử dụng bản đồ OpenStreetMap làm nền\r\n//             L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {\r\n//                 attribution: '&copy; <a href=\"https://www.openstreetmap.org/copyright\">OpenStreetMap</a> contributors'\r\n//             }).addTo(map);\r\n\r\n//             // Tạo icon cho trạm chính\r\n//             const mainStationIcon = L.icon({\r\n//                 iconUrl: mainStationIconUrl,\r\n//                 iconSize: [25, 41],\r\n//                 iconAnchor: [12, 41],\r\n//                 popupAnchor: [0, -41]\r\n//             });\r\n\r\n//             // Tạo icon cho trạm con\r\n//             const subStationIcon = L.icon({\r\n//                 iconUrl: subStationIconUrl,\r\n//                 iconSize: [25, 41],\r\n//                 iconAnchor: [12, 41],\r\n//                 popupAnchor: [0, -41]\r\n//             });\r\n\r\n//             // Dữ liệu tọa độ của các trạm thu thập dữ liệu (ví dụ)\r\n//             const stations = [\r\n//                 { name: 'Station 1', location: [21.0285, 105.8542], children: [[21.02, 105.85], [21.03, 105.85], [21.04, 105.85]] },\r\n//                 { name: 'Station 2', location: [10.762622, 106.660172], children: [[10.76, 106.66], [10.77, 106.66], [10.78, 106.66]] },\r\n//                 { name: 'Station 3', location: [16.0544, 108.2022], children: [[16.05, 108.20], [16.06, 108.20], [16.07, 108.20]] }\r\n//                 // Thêm các trạm khác vào đây\r\n//             ];\r\n\r\n//             // Đánh dấu các điểm trạm trên bản đồ với icon tùy chỉnh\r\n//             stations.forEach(station => {\r\n//                 const mainStationMarker = L.marker(station.location, { icon: mainStationIcon }).addTo(map).bindPopup(`<b>${station.name}</b>`); \r\n//                 mainStationMarkers.current.push(mainStationMarker); \r\n\r\n//                 // Sự kiện click trên marker của trạm chính\r\n//                 mainStationMarker.on('click', () => {\r\n//                     // Zoom vào vị trí của marker trạm chính\r\n//                     map.setView(station.location, 14.5);\r\n\r\n//                     // Xóa các marker của trạm con hiện tại\r\n//                     subStationMarkers.current.forEach(marker => map.removeLayer(marker));\r\n//                     subStationMarkers.current = [];\r\n\r\n//                     // Hiển thị vị trí của các node con với icon trạm con\r\n//                     station.children.forEach(child => {\r\n//                         const subStationMarker = L.marker(child, { icon: subStationIcon }).addTo(map); // Thêm marker cho node con với icon trạm con\r\n//                         subStationMarkers.current.push(subStationMarker); // Thêm marker của trạm con vào danh sách\r\n//                     });\r\n//                 });\r\n//             });\r\n\r\n//             // Sự kiện zoomend để xóa các marker của trạm con khi zoom < 7\r\n//             map.on('zoomend', function() {\r\n//                 const zoom = map.getZoom();\r\n//                 if (zoom > 9) {\r\n//                     subStationMarkers.current.forEach(marker => map.removeLayer(marker));\r\n//                     subStationMarkers.current = [];\r\n//                 }\r\n//             });\r\n//         }\r\n//     }, [mapContainer]);\r\n\r\n//     return <div ref={mapContainer} id=\"map\" className=\"map-container\"></div>;\r\n// }\r\n\r\n// export default Main;\r\n\r\nimport React, { useEffect, useRef, useState } from 'react';\r\nimport L from 'leaflet'; \r\nimport 'leaflet/dist/leaflet.css'; \r\nimport axios from 'axios';\r\nimport mainStationIconUrl from '../assets/gateway_icon.png'; // Đường dẫn đến icon của trạm chính\r\nimport subStationIconUrl from '../assets/device_icon.png'; // Đường dẫn đến icon của trạm con\r\n\r\nfunction Main() {\r\n    const mapContainer = useRef(null);\r\n    const mainStationMarkers = useRef([]); // Ref cho danh sách các markers của trạm chính\r\n    const subStationMarkers = useRef([]); // Ref cho danh sách các markers của trạm con\r\n    const [gateways, setGateways] = useState([]);\r\n\r\n    useEffect(() => {\r\n        // Lấy token từ localStorage\r\n        const token = localStorage.getItem('Token');\r\n\r\n        // Gọi API để lấy thông tin về các gateway\r\n        axios.get('http://sanslab.ddns.net:5000/api/gateway/getallGateway', {\r\n            headers: {\r\n                authorization: `Bearer ${token}`\r\n            }\r\n        })\r\n        .then(response => {\r\n            // Xử lý phản hồi từ server\r\n            const data = response.data;\r\n            setGateways(data.data.gateways);\r\n        })\r\n        .catch(error => {\r\n            // Xử lý lỗi\r\n            console.error('Error fetching gateways:', error);\r\n        });\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        if (!mapContainer.current || mapContainer.current.children.length === 0) {\r\n            // Khởi tạo bản đồ và đặt tọa độ trung tâm ở Việt Nam\r\n            const map = L.map(mapContainer.current).setView([16.4637, 107.5909], 6);\r\n\r\n            // Sử dụng bản đồ OpenStreetMap làm nền\r\n            L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {\r\n                attribution: '&copy; <a href=\"https://www.openstreetmap.org/copyright\">OpenStreetMap</a> contributors'\r\n            }).addTo(map);\r\n\r\n            // Tạo icon cho trạm chính\r\n            const mainStationIcon = L.icon({\r\n                iconUrl: mainStationIconUrl,\r\n                iconSize: [25, 41],\r\n                iconAnchor: [12, 41],\r\n                popupAnchor: [0, -41]\r\n            });\r\n\r\n            // Tạo icon cho trạm con\r\n            const subStationIcon = L.icon({\r\n                iconUrl: subStationIconUrl,\r\n                iconSize: [25, 41],\r\n                iconAnchor: [12, 41],\r\n                popupAnchor: [0, -41]\r\n            });\r\n\r\n            // Đánh dấu các điểm trạm trên bản đồ với icon tùy chỉnh\r\n            gateways.forEach(gateway => {\r\n                const { gateway_name, location, device } = gateway;\r\n\r\n                // Đánh dấu trạm chính\r\n                const mainStationMarker = L.marker([location[0].lat, location[0].lon], { icon: mainStationIcon }).addTo(map).bindPopup(`<b>${gateway_name}</b>`); \r\n                mainStationMarkers.current.push(mainStationMarker); \r\n\r\n                // Sự kiện click trên marker của trạm chính\r\n                mainStationMarker.on('click', () => {\r\n                    // Zoom vào vị trí của marker trạm chính\r\n                    map.setView([location[0].lat, location[0].lon], 14.5);\r\n\r\n                    // Xóa các marker của trạm con hiện tại\r\n                    subStationMarkers.current.forEach(marker => map.removeLayer(marker));\r\n                    subStationMarkers.current = [];\r\n\r\n                    // Hiển thị vị trí của các node con với icon trạm con\r\n                    device.forEach(subStation => {\r\n                        const subStationMarker = L.marker([subStation.location.lat, subStation.location.lon], { icon: subStationIcon }).addTo(map); // Thêm marker cho node con với icon trạm con\r\n                        subStationMarkers.current.push(subStationMarker); // Thêm marker của trạm con vào danh sách\r\n                    });\r\n                });\r\n            });\r\n\r\n            // Sự kiện zoomend để xóa các marker của trạm con khi zoom < 7\r\n            map.on('zoomend', function() {\r\n                const zoom = map.getZoom();\r\n                if (zoom > 9) {\r\n                    subStationMarkers.current.forEach(marker => map.removeLayer(marker));\r\n                    subStationMarkers.current = [];\r\n                }\r\n            });\r\n        }\r\n    }, [gateways]);\r\n\r\n    return <div ref={mapContainer} id=\"map\" className=\"map-container\"></div>;\r\n}\r\n\r\nexport default Main;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}